input CreateDocumentInput {
  folder: String!
  data: JSON!
}

"""Input data for `createDocuments` mutation"""
input CreateDocumentsInput {
  documents: [CreateDocumentInput!]!
}

type CreateDocumentsOutput {
  documents: [Document!]!
}

"""Date with time (isoformat)"""
scalar DateTime

"""Document type to describe a collected data."""
type Document implements Node {
  id: GlobalID!

  """Document folder it belongs to."""
  folder: Folder!

  """Document data in JSON format."""
  data: JSON

  """Creation datetime of folder."""
  created: DateTime!

  """Last modification datetime of folder."""
  lastModified: DateTime!
}

"""A connection to a list of items."""
type DocumentConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [DocumentEdge!]!

  """Total quantity of existing nodes"""
  totalCount: Int
}

"""An edge in a connection."""
type DocumentEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Document!
}

"""Folder type to group documents."""
type Folder implements Node {
  id: GlobalID!

  """Folder's owner."""
  owner: User!

  """Name of folder to display."""
  name: String!

  """Creation datetime of folder."""
  created: DateTime!

  """Last modification datetime of folder."""
  lastModified: DateTime!

  """Document folder it belongs to."""
  documents(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): DocumentConnection!
}

"""A connection to a list of items."""
type FolderConnection {
  """Pagination data for this connection"""
  pageInfo: PageInfo!

  """Contains the nodes in this connection"""
  edges: [FolderEdge!]!

  """Total quantity of existing nodes"""
  totalCount: Int
}

"""An edge in a connection."""
type FolderEdge {
  """A cursor for use in pagination"""
  cursor: String!

  """The item at the end of the edge"""
  node: Folder!
}

"""
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
"""
scalar GlobalID @specifiedBy(url: "https://relay.dev/graphql/objectidentification.htm")

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  """Create bulk of documents."""
  createDocuments(
    """Input data for `createDocuments` mutation"""
    input: CreateDocumentsInput!
  ): CreateDocumentsOutput!
}

"""An object with a Globally Unique ID"""
interface Node {
  """The Globally Unique ID of this object"""
  id: GlobalID!
}

"""Information to aid in pagination."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  """Return current user information."""
  userSelf: User!

  """List of user's folders."""
  folders(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): FolderConnection!

  """List of documents in folders owned by user."""
  documents(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): DocumentConnection!
}

type Subscription {
  """Triggered new document created in user's folder."""
  documentCreated: [Document!]!
}

"""Common user type."""
type User implements Node {
  id: GlobalID!

  """150자 이하 문자, 숫자 그리고 @/./+/-/_만 가능합니다."""
  username: String!

  """User's real name."""
  name: String!
  dateJoined: DateTime!

  """Last modification datetime of folder."""
  lastModified: DateTime!

  """Folder's owner."""
  folders(
    """Returns the items in the list that come before the specified cursor."""
    before: String = null

    """Returns the items in the list that come after the specified cursor."""
    after: String = null

    """Returns the first n items from the list."""
    first: Int = null

    """Returns the items in the list that come after the specified cursor."""
    last: Int = null
  ): FolderConnection!
}
